
<%-- :mode=jsp: --%>
<c:set var="tool" value="tabs"/>

<h1 style="background-image:url(${jqt}/img/hero/tabs.jpg)">
	jQuery TOOLS / Tabs - Tabs done right
</h1>

<!--{{{ example tabs -->

<script>
$(function() {
	$(".tabs").tabs(".panes > div");
});
</script>

<style>
div.panes div {
	margin-top:10px;
	display:none;
	height:80px;
	width:700px;
	font-size:18px;
}

div.panes img {
	float:right;
	margin-left:20px;
}
</style>

<ul class="tabs" style="position:relative;top:-46px;margin-top:0px">
	<li><a href="#">First tab</a></li>
	<li><a href="#">Second tab</a></li>
	<li><a href="#">Third tab</a></li>
</ul>

<br clear="all" />

<div class="panes" style="height:110px;position:relative;top:-40px">
	<div>
		<img src="${cnd}${jqt}/img/logo-medium.png" style="position:relative;top:-75px;margin-bottom:-80px"/>
		<strong class="blue">Tab pane 1</strong>. Here you can see tabs in action. They are the most popular user-interface component on the web. And for good reason: they are intuitive to use, people are used to them, and above all your can organize your pages in a more user-friendly way.
	</div>

	<div>
		<img src="${cnd}/img/title/eye192.png" style="position:relative;top:-42px;margin-bottom:-50px"/>
		<strong class="blue">Tab pane 2</strong>. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed lorem. Aenean commodo pede a eros volutpat viverra. Pellentesque a nisl. Nullam et metus.
	</div>

	<div>
		<img src="${cdn}/img/title/screens.png" />
		<strong class="blue">Tab pane 3</strong>. Praesent dictum, velit vel adipiscing suscipit, metus nisl lobortis sem, nec elementum nibh urna non turpis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae.
	</div>
</div>

<br clear="all" />

<!--}}}-->


<%--{{{ intro --%>

<div class="feat">

	<h3 class="first">Simple</h3>

	<p>
		The above tabs are initialized with this JavaScript one-liner <samp>$(".tabs").tabs(".panes > div");</samp>. The rest is CSS coding. The core of the tabs is plain and simple. There are no redundant features.</li>
	</p>

	<h3>Fading, sliding, ajaxed, horizontal ...</h3>

	<p>
		The logic in tabs is simple. You click on something and it does something elsewhere. This tool has an <a href="#effects">effect framework</a> that generalizes this logic making it possible to do wildly different things such as accordions or crossfading tabs.
	</p>

</div>

<div class="feat last">

	<h3 class="first">Respects browsers' back button</h3>

	<p>
		You can enable <samp>history</samp> support for tabs so that end users can navigate between tabs using their browser's back and forward buttons. Just like everything else this works in all browsers.
	</p>

	<h3>File size: 0.9 Kb</h3>

	<p>
		And you'll have all the features and configuration options you'll possibly need, such as effects and a plugin framework, <a href="#api">scripting API</a> and an <a href="#events">event model</a>. A smaller codebase is easier to control and results in snappier behaviour. Without gzipping the size is 2.9 Kb.
	</p>

</div>

<br clear="all" />

<%--}}}--%>

<h3>Quick Start</h3>

<p>
	Here is the minimal HTML code to get tabs working:
</p>

<pii:code lang="html">
<!-- the tabs -->
<ul class="tabs">
	<li><a href="#">Tab 1</a></li>
	<li><a href="#">Tab 2</a></li>
	<li><a href="#">Tab 3</a></li>
</ul>

<!-- tab "panes" -->
<div class="panes">
	<div>pane 1 content</div>
	<div>pane 2 content</div>
	<div>pane 3 content</div>
</div>
</pii:code>

<h4>JavaScript setup</h4>

<p>
	This JavaScript snippet activates those tabs:
</p>

<pii:code>
// setup ul.tabs to work as tabs for each div directly under div.panes
$("ul.tabs").tabs("div.panes > div");
</pii:code>

<p>
	The rest is <a href="${jqt}/css/tabs-no-images.css">CSS coding</a>. Look at the <a href="${jqt}/demos/tabs/index.htm">standalone version</a> and its source code to get things working on your site.
</p>

<p>
	Since v1.2.3 another <samp>$("ul.tabs").tabs()</samp> call would <a href="#">destroy</a> the existing instance and will install a completely new tabs instance. 
</p>


<a name="demos"></a>
<h2>demos</h2>

<p>
	It's important to <strong>study the first demo</strong>, "Minimal setup for tabs", because it teaches you the basics of using the library.
</p>

<ul>
	<c:forEach items="${f:getDemo(context.toolDemos, 'tabs/index.html').category.demos}" var="demo">
		<li> <a href="${jqt}/demos/${demo.path}">${demo.title}</a> </li>
	</c:forEach>
</ul>


<c:set var="description">
	<p>
		These graphics are being used in the following CSS files: <a href="css/tabs.css">default tabs</a> and <a href="css/tabs-flowplayer.css">tabs with panes</a> and they are using a technique called <a href="http://www.alistapart.com/articles/sprites/" class="external">CSS sprites</a> which is a very important technology in tab design.
	</p>
</c:set>

<%@ include file="../graphics.jsf" %>


<p>
	<img src="../img/tabs/blue.png" alt="Blue tab skin" />
</p>

<br />

<p>
	<img src="../img/tabs/green.png" alt="Green tab skin" />
</p>

<br />

<p>
	<img src="../img/tabs/thumb/blue_panes.jpg" />
</p>


<a name="configuration"></a>
<h2>Configuration</h2>

<p>
	There are many other ways of using this tool than the demos provided above. Here is a generic form for constructing tabs:
</p>

<pii:code>
$("<tabs_selector>").tabs("<pane_selector>", {
	/* tabs configuration goes here */

	// first configuration property
	event: 'mouseover',

	// another property
	effect: 'slide',

	// ... the rest of the configuration properties
});
</pii:code>


<h4>tabs_selector</h4>

<p>
	You select one or more root elements for the tabs with the <samp>tabs_selector</samp> which is a <a href="http://api.jquery.com/category/selectors/" class="external">jQuery selector</a>. The root element is a <em>container</em> for individual tabs. By default, the tool searches for <samp>a</samp> tags inside the root element that will work as individual tabs. This can be changed with the <samp>tabs</samp> configuration option. The root element can be any HTML element such as <samp>div</samp>, <samp>ul</samp>, <samp>dl</samp> or <samp>table</samp>.
</p>

<h4><em>1<sup>st</sup> argument:</em> pane_selector</h4>

<p>
	In Tabs terminology, the content areas for tabs are called "panes". The <samp>pane_selector</samp> selects the content areas that correspond to the individual tabs. For example, the selector: <samp>div.panes > div</samp> selects all <samp>div</samp> elements that are direct children of the <samp>div.panes</samp> element. The first pane is assigned to the first tab and second to the second tab and so on. This selector does not select any root element and it should return as many elements as you have tabs.
</p>

<p>
	The value for this argument can also be a jQuery object that contains the required panes.
</p>

<h4><em>2<sup>nd</sup> argument:</em> configuration</h4>

<p>
	The second argument for the initialization call is the configuration object. It can be either a <samp>function</samp> in which case it will correspond to an <samp>onBeforeClick</samp> event listener or it can be a complex object with many different configuration options. Here is the full list of available options:
</p>

<p>
	<strong>Note</strong>: If you want to instantiate multiple tabs with the same call then you should <a href="#multiple">read this</a>.
</p>

<table class="listing">
	<thead>
		<tr>
			<th>property</th>
			<th>default</th>
			<th>description</th>
		</tr>
	</thead>
	<tr>
		<td class="code">current</td>
		<td><code>'current'</code></td>
		<td>
			The CSS class name for the currently active tab.
		</td>
	</tr>
	<tr>
		<td class="code">effect</td>
		<td><code>'default'</code></td>
		<td>
			<p>
				The effect to be used when a tab is clicked. This can dramatically change the behaviour of the tabs. Here are the available built-in effects:
			</p>

			<ul>
				<li><samp>'default'</samp>: a simple show/hide effect. The default behaviour for tabs.</li>
				<li><samp>'fade'</samp>: the tab contents are gradually shown from zero to full opacity.</li>
				<li><samp>'ajax'</samp>: loads tab contents from the server using AJAX. <a href="${jqt}/demos/tabs/ajax.html">View example</a>.</li>
				<li><samp>'slide'</samp>: a vertical sliding effect, suitable for <a href="${jqt}/demos/tabs/accordion.html">accordions</a>.</li>
				<li><samp>'horizontal'</samp>: a horizontal sliding effect, suitable for <a href="${jqt}/demos/tabs/accordion-horizontal.html">horizontal accordions</a>.</li>
			</ul>

			<p>
				You can also <a href="#effects">make your own effects</a>.
			</p>
		</td>
	</tr>
	<tr>
		<td class="code">event</td>
		<td><code>'click'</code></td>
		<td>
			Specifies the event when a tab is opened. By default, this happens when the user clicks on the tab. Other valid values are <samp>'mouseover'</samp> and <samp>'dblclick'</samp>.
		</td>
	</tr>
	<tr>
		<td class="code">fadeInSpeed</td>
		<td><code>200</code></td>
		<td>
			<strong>Since 1.0.1.</strong> Only available when used together with the "fade" effect. This property defines how fast (in milliseconds) the opened pane reveals its content.
		</td>
	</tr>
	<tr>
		<td class="code">fadeOutSpeed</td>
		<td><code>0</code></td>
		<td>
			<strong>Since 1.1.0.</strong> Only available when used together with the "fade" effect. This property defines how fast (in milliseconds) the opened pane hides its content. A positive value here will result in a "crossfade" effect which is demonstrated <a href="slideshow.html">here</a>.
		</td>
	</tr>
	<tr>
		<td class="code">history</td>
		<td><code>false</code></td>
		<td>
			<strong>Since 1.2.0</strong>. Enables support for browser's "back button" so that when a user clicks on the back or forward buttons the tabs are opened accordingly. Requires that the <a href="${jqt}/toolbox/history.html">History tool</a> is included on your page.
		</td>
	</tr>
	<tr>
		<td class="code">initialIndex</td>
		<td><code>0</code></td>
		<td>
			Specifies the tab that is initially opened when the page loads. This automatically triggers a <samp>click</samp> event for the tab specified in this property. Specifying <samp>null</samp> or a negative number here will not trigger the <samp>click</samp> event upon page load causing all tabs to be initially closed.
		</td>
	</tr>

	<tr>
		<td class="code">rotate</td>
		<td><code>false</code></td>
		<td>
			<strong>Since 1.1.0.</strong> When the last tab is open and the <samp>next()</samp> API call is invoked, then the tabs will start from the beginning and when the first tab is open and the <samp>prev()</samp> call is invoked the tabs will advance to the last tab. This is demonstrated in <a href="slideshow.html">here</a>.
		</td>
	</tr>
	<tr>
		<td class="code">tabs</td>
		<td><code>'a'</code></td>
		<td>
			A selector for elements that are used as tabs inside the root element. If none are found then the direct children of the root element are used as tabs.
		</td>
	</tr>

</table>

<a name="multiple"></a>
<h3>Initializing multiple Tabs</h3>

<p>
	Typically you have one Tabs instance on your page and your panes can be placed anywhere on the page. It is possible to instantiate multiple Tabs with the same call. For example, if you have multiple root elements with a CSS class name "tabs", they can all be instantiated like this:
</p>

<pii:code>
$(".tabs").tabs(".panes > div");
</pii:code>

<p>
	So how do we know which panes belong to which tabs? The solution is to enclose each tab/pane combination inside a wrapper element. For example:
</p>

<pii:code lang="html">
<!-- 1st Tabs and associative panes inside a wrapping DIV element -->
<div>
	<ul class="tabs">
		...
	</ul>

	<div class="panes">
		...
	</div>
</div>

<!-- 2nd Tabs and accociative panes inside a wrapping DIV element -->
<div>
	<ul class="tabs">
		...
	</ul>

	<div class="panes">
		...
	</div>
</div>
</pii:code>

<p>
	Now all Tabs will work individually. Note that instantiating Tabs with one call as in above example is different than doing multiple separate identical calls. Of course you can always instantiate your Tabs separately but you need to supply different selector for the panes. For example:
</p>

<pii:code>
// two Tabs instantiation calls with different selectors
$("#tabs1").tabs("#panes1 > div");
$("#tabs2").tabs("#panes2 > div");

// done.
</pii:code>

<p>
	With accordion setups you typically have a common root element for both the tabs and the panes so there is no need for a separate wrapper element. You should take a look at the demo about <a href="${jqt}/demos/tabs/multiple.html">Multiple Tabs and Accordion instances</a>.
</p>


<a name="callbacks"></a>
<a name="events"></a>
<h2>Events</h2>

<p>
	Make sure you have read about <a href="${jqt}/documentation/scripting.html#events">Events in jQuery Tools</a>. All event listeners receive the <a href="${jqt}/documentation/scripting.html#event_object">Event Object</a> as the first argument.
</p>

<table class="listing">
	<thead>
		<tr>
			<th>event</th>
			<th nowrap>When does it occur?</th>
		</tr>
	</thead>

	<tr>
		<td class="code">onBeforeClick</td>
		<td>
			Before a tab is clicked. The second argument is the index number of the tab to be clicked.
		</td>
	</tr>
	<tr>
		<td class="code">onClick</td>
		<td>
			After a tab is clicked. The second argument is the index number of the tab being clicked.
		</td>
	</tr>
</table>

<a name="api"></a>
<h2>Scripting <em>API</em></h2>

<p>
	This tool has a useful API for scripters. A lot of effort has been put into it so that you can enrich the tabbing experience. You can get a handle to the API in numerous ways as described in the <a href="${jqt}/documentation/index.html#api">User's Manual</a>. Here is an example of how to access the API:
</p>


<pii:code>
// get handle to the api (must have been constructed before this call)
var api = $("ul.tabs").data("tabs");

// advance to the next tab
api.next();

// send google analytics when tabs are clicked
api.onClick(function(e, index) {
	_tracker._trackEvent("Documentation", "Tabs", "tab " + index);
});
</pii:code>


<p>
	Here is a list of all API methods:
</p>

<table class="listing">
	<thead>
		<tr>
			<th>method</th>
			<th nowrap>return value</th>
			<th>description/example</th>
		</tr>
	</thead>

	<tr>
		<td class="code">click(index)</td>
		<td><code>API</code></td>
		<td>
			Activates the tab specified in the argument. The argument can be either an <samp>integer</samp> number specifying the tab index (starting from 0) or, when the tabs are <samp>a</samp> tags, it can be the <samp>href</samp> attribute as a quoted <samp>string</samp>.
		</td>
	</tr>
	<tr>
		<td class="code">destroy()</td>
		<td><code>API</code></td>
		<td>
			<strong>Since 1.2.3</strong> completely removes existing tabs instance.
		</td>
	</tr>	
	<tr>
		<td class="code">getConf()</td>
		<td><code>Object</code></td>
		<td>
			<strong>Since 1.0.1.</strong> Returns the configuration object for the tabs instance. This object can be modified and the changes are dynamically reflected in the behaviour of the tabs.
		</td>
	</tr>
	<tr>
		<td class="code">getCurrentPane()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the current pane as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">getCurrentTab()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the current tab as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">getIndex()</td>
		<td><code>integer</code></td>
		<td>
			Returns the current tab index number.
		</td>
	</tr>
	<tr>
		<td class="code">getPanes()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the panes as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">getTabs()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the tabs as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">next()</td>
		<td><code>API</code></td>
		<td>
			Advances to the next tab.
		</td>
	</tr>
	<tr>
		<td class="code">prev()</td>
		<td><code>API</code></td>
		<td>
			Advances to the previous tab.
		</td>
	</tr>	
</table>

<a name="effects"></a>
<h2>Making custom effects</h2>

<p>
	If you want to make custom effects you should use the <samp>$.tools.tabs.addEffect</samp> method. This method is "static", meaning that you don't have to have the tabs API (or instance) already loaded. You can add effects before any tabs are constructed.
</p>

<p>
	This method accepts two arguments. The first argument is the effect name and the second argument is the function that performs the required functionality when a tab (or accordion header) is clicked. You can use this method to modify existing effects or add new ones. Here is an example:
</p>

<pii:code>
// adds an effect called "myEffect" to tabs
$.tools.tabs.addEffect("myEffect", function(tabIndex, done) {

	/* here you'll write your effect. the 'this' variable points to the API */

});
</pii:code>

<p>
	Your effect function accepts two arguments. The first, <samp>tabIndex</samp>, is the tab index number and the second, <samp>done</samp>, is a function that you <em>must call</em> after your effect finishes its job. This can be accomplished by calling <samp>done.call();</samp> .
</p>

<h3>The default effect</h3>

<p>
	Effects are actually quite easy to implement. The default effect, for example, does the following:
</p>

<pii:code>
$.tools.tabs.addEffect("default", function(tabIndex, done) {

	// hide all panes and show the one that is clicked
	this.getPanes().hide().eq(tabIndex).show();

	// the supplied callback must be called after the effect has finished its job
	done.call();
});
</pii:code>

<p>
	Look in the tab's source code for more examples of the available effects. The basic idea is to use your jQuery skills together with the API methods. Here you can see a demo about a <a href="${jqt}/demos/tabs/accordion-custom.html">custom accordion effect</a>.
</p>


