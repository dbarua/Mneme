
<%-- :mode=jsp: --%>
<%@ include file="../header.jsf" %>


<p>
	This time we add navigational elements to the <a href="index.html">minimal setup</a>. We have identical HTML, JavaScript and CSS coding for the basic scrolling functionality but we have additional tags placed beside the scrollable for navigation. You can also use your mousewheel to scroll through the elements.
</p>

<%@ include file="navigation.htm" %>

<h3>HTML code</h3>

<p>
	Here we have the new tags <samp>a.next, a.prev</samp> and <samp>div.navi</samp> placed before and after the scrollable. Those tags will <strong>automatically</strong> become navigational elements without additional JavaScript programming. Only their appearance are modified with CSS.
</p>

<pii:code lang="html">${html}</pii:code>

<h3>JavaScript code</h3>

<p>
	We have identical JavaScript coding as in the minimal setup. No additional configuration options are necessary and we are happy with the default settings.
</p>

<pii:code>${js}</pii:code>

<p>
	If you would wanted to use another kind of tag or class name for your navigational items you must tell the scrollabe about those changes in its configuration. Let's say you want the "next" and "prev" links to be like this:
</p>

<pii:code lang="html">
<!-- custom "prev" link -->
<div class="less"></div>

<!-- custom "next" link -->
<div class="more"></div>
</pii:code>

<p>
	Then you'll need following configuration:
</p>

<pii:code>
$("div.scrollable").scrollable({
	next: 'div.less',
	prev: 'div.more'
});
</pii:code>

<h3>Mousewheel support</h3>

<p>
	Mousewheel support is enabled by simply including the <a href="http://plugins.jquery.com/project/mousewheel" class="external">jquery.mousewheel</a> plugin in the page like this. You should specify the file after jQuery is being called, but before scrollable is loaded.
</p>

<pii:code lang="html">
<script src="${cdn}/js/jquery.mousewheel.js"></script>
</pii:code>

<h3>CSS code</h3>

<p>
	We are using <a href="${jqt}/css/scrollable-minimal.css">this file</a> for the scrollable setup. It is the same as in <a href="index.html">minimal setup</a> and we use <a href="${jqt}/css/scrollable-navig.css">this file</a> for the navigational buttons. Both files are documented.
</p>


<div class="box petrol">
	Show this demo as a <a href="navigation.htm">standalone page</a>. Note that this standalone version uses jQuery 1.3 just to show you that it works!
</div>

<a name="pagescroll"></a>
<h2>Page scroll</h2>

<p>
	Here is another demo which shows you how to add navigational buttons that navigate between <strong>pages</strong> instead of single items.
</p>

<c:set var="html">
<!-- prev page -->
<a class="prevPage"></a>

<!-- root element for scrollable -->
<div class="scrollable">

	<!-- root element for the items -->
	<div class="items">
		<div>0</div>  <div>1</div>  <div>2</div>  <div>3</div>  <div>4</div>
		<div>5</div>  <div>6</div>  <div>7</div>  <div>8</div>  <div>9</div>
		<div>10</div> <div>11</div> <div>12</div> <div>13</div> <div>14</div>
	</div>

</div>

<!-- next page -->
<a class="nextPage"></a>

<!-- power tag: let rest of the page layout normally -->
<br clear="all" />
</c:set>

${html}

<h3>HTML setup</h3>

<p>
	The trick is to add <samp>a.prevPage</samp> and <samp>a.nextPage</samp> elements beside the scrollable:
</p>
<pii:code lang="html">
${html}
</pii:code>

<h3>JavaScript coding</h3>

<p>
	Our <samp>$("div.scrollable").scrollable();</samp> call is enough for initializing <strong>both</strong> of our scrollables on this page without extra configuration variables.
</p>




