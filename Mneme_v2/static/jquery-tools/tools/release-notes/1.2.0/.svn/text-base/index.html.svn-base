<%-- :mode=jsp: --%>
<h1 id="hero">
	<span></span>
	Version <i>1.2.0.</i>
	<em>April 30, 2010 <strong>A huge upgrade + the FORM tools</strong></em>
</h1>

<script>
$(function() {
	$("#right a:first").addClass("selected")
});
</script>

<div id="breadcrumb">
	<a href="../index.html">Introduction to 1.2.0 &raquo;</a> Detailed list of changes
</div>

<p class="more first">
	This library is constantly improving. New tools are introduced and old tools are rewritten or even dropped. New configuration variables are introduced and old ones are removed. Radical changes keep this library on the cutting edge. The downside is that when you do upgrade, things may not always work as expected. It happens in this version and it will happen in future versions too.
</p>

<%--{{{  all --%>

<a name="all"></a>
<h2>All Tools</h2>

<p>
	The previous version had the handy configuration variable <samp>api</samp> for accessing the Tools programming API. Many people liked it but not all. After serious consideration I decided to drop it and go with the jQuery "community". Now you'll have to access the api with jQuery's <samp>data</samp> method. For example:
</p>

<pii:code>
// get handle to scrollable's API
var api = $(".scrollable").data("scrollable");
</pii:code>

The <samp>api</samp> configuration variable is still working but is now deprecated. Another common practice for jQuery users is to use the <samp>bind</samp> method to assign callback methods. For example:

<pii:code>
$(".scrollable").bind("seekTo", function() {
	// Here this- variable references the DOM object
});
</pii:code>

<p>
	This is now supported. You can also assign callback methods from the programming API just like before. For example:
</p>

<pii:code>
var api = $(".scrollable").data("scrollable");

api.seekTo(function() {
	// Here the 'this' variable references the scrollable API
});
</pii:code>

<p>
	Read about <a href="${jqt}/documentation/scripting.html">events in jQuery Tools</a> to learn more details.
</p>
<%--}}}--%>


<%--{{{  scrollable --%>

<a name="scrollable"></a>
<h2>A brand new Scrollable</h2>

<p>
	Scrollable has undergone the largest change of all tools. The new scrollable is more than 50% smaller than the previous version! This was possible by changing the whole logic of the tool. The new logic has been greatly simplified. Every time you want to scroll you are advancing one step. There are no pages at all. If you want pages you need to design them with HTML. Here is an example layout for scrollable that has three pages and each page has four items:
</p>


<pii:code>
<!-- root element -->
<div class="scrollable">

	<!-- root element for scrollable items -->
	<div class="items">

		<!-- page #1 -->
		<div class="page">
			<div></div> <div></div> <div></div> <div></div>
		</div>

		<!-- page #2 -->
		<div class="page">
			<div></div> <div></div> <div></div> <div></div>
		</div>

		<!-- page #3 -->
		<div class="page">
			<div></div> <div></div> <div></div> <div></div>
		</div>
	</div>
</div>
</pii:code>

<p>
	And the scrollable is initalized with this call:
</p>

<pii:code>
$(".scrollable").scrollable();
</pii:code>

<p>
	The <samp>size</samp> configuration variable is no longer needed. Now you are free to design your pages and each page can have any amount of items or HTML.
</p>

<p>
	Due to the lack of pages, the following configuration variables were removed: <samp>size, keyboardSteps, nextPage</samp> and <samp>prevPage</samp> and the following methods were removed: <samp>getPageAmount, getPageIndex, movePage, nextPage, prevPage</samp> and <samp>setPage</samp>.
</p>

<h3>Circular plugin</h3>

<p>
	In the new scrollable, infinite looping is built inside the tool and you enable it with the <samp>circular</samp> configuration property as follows:
</p>

<pii:code>
// 1.2. circular feature is built-in the tool
$(".scrollable").scrollable({ circular: true });

// old version. separate circular plugin
$(".scrollable").scrollable().circular();
</pii:code>

<p>
	The new circular feature is more solid and is no longer considered as beta.
</p>

<h3>Clickable</h3>

<p>
	The new scrollable does not support moving forward or backward if you click on the items. If you want to implement clicking, you need to do it yourself. For example:
</p>

<pii:code>
// initialize circular scrollable
$(".scrollable").scrollable({ circular: true }).click(function() {

	// every time it is clicked it advances one step forward
	$(this).data("scrollable").next();
});
</pii:code>

<p>
	Because this feature was removed, the following configuration variables no longer exist: <samp>clickable</samp> and <samp>activeClass</samp>. Also the <samp>click</samp> method was removed from the JavaScript API.
</p>


<h3>Adding new items</h3>

<p>
	Previously, you added items directly with jQuery's <samp>append</samp> method and called scrollable's <samp>reload</samp> method. Now there is a new <samp>addItem</samp> method that you use to add items to the scrollable. It can now be used even with circular scrollables. Examples:
</p>

<pii:code>
// get scrollable API
var api = $("#myscroll").data("scrollable");

// supply item as string
api.addItem("<div>My new item</div>");

// query item on the page and add it to the scrollable
api.addItem($("#existing_item"));

// create an item and add it to the scrollable
var item = $("<div/>", { class: 'item' });
api.addItem(item);
</pii:code>

<p>
	When an item is added the new <samp>onAddItem</samp> event is fired.
</p>

<h3>Support for back button</h3>

<p>
	If you use the <a href="${jqt}/scrollable/navigator.html">navigator plugin</a> you have the ability to browse through scrollable items with the browser's back (and forward) buttons. For example:
</p>

<pii:code>
$(".scrollable").scrollable().navigator({history: true});
</pii:code>

<p>
	This feature is added with the <samp>history</samp> configuration option. It works even for dynamically added items.
</p>

<h3>Miscellaneous changes</h3>

<p>
	The new scrollable is good at guessing whether it is oriented vertically or horizontally by investigating its dimensions. If the height is larger than the width then the scrollable is vertical. You can override this automatic determination with the <samp>vertical</samp> configuration option.
</p>

<p>
	The <samp>item</samp> and <samp>globalNav</samp> configuration variables and <samp>onStart</samp> event were removed  because they were so rarely used and too complex to explain. Such features should not even exist.
</p>

<p>
	The <samp>hoverClass</samp> option was removed because this feature can easily be added with external scripting as follows:
</p>

<pii:code>
$(".item").hover(function() {
	$(this).toggleClass("active");
});
</pii:code>

<p>
	The <samp>reload</samp> method was removed. There is no need to reload again. The tool looks for the configuration changes automatically.
</p>

<div class="box petrol">
	The new scrollable is so different that the <a href="${jqt}/scrollable/">documentation</a> does not say whether a feature is added or removed in this release. The documentation simply describes the latest version.
</div>

<%--}}}--%>


<%--{{{  tooltip --%>

<a name="tooltip"></a>
<h2>Tooltip</h2>

<p>
	The new Tooltip does not require that you create the tooltip element manually. You can simply supply the tooltip in the <samp>title</samp> attribute and call <samp>$(".tooltip_triggers").tooltip();</samp>. The tooltips are automatically generated and by default they are assigned the CSS class name <samp>tooltip</samp>. You can change the default class name with the new configuration option <samp>tipClass</samp>. You can also supply the whole HTML layout for the generated tooltips by using the new <samp>layout</samp> configuration option.
</p>

<p>
	If you had previously used the <samp>tip: '.tooltip'</samp> configuration, simply remove that.
</p>

<p>
	The <samp>tip</samp> configuration option is only used when you want to use a <em>single</em> tooltip element for multiple triggers.
</p>

<p>
	In previous version you were able to supply the <samp>tip</samp> and <samp>onBeforeShow</samp> configuration options as the only argument for the tooltip. This is no longer supported for the sake of simplicity.
</p>

<p>
	The <samp>oneInstance</samp> and <samp>lazy</samp> configuration options were removed to make the source code cleaner.
</p>


<%--}}}--%>


<%--{{{  overlay --%>

<a name="overlay"></a>
<h2>Overlay</h2>

<p>
	The biggest change in the new overlay is that the overlay positioning is fixed by default. This means that overlay stays still while the screen is scrolled. You can disable this by setting the <samp>fixed</samp> configuration property to <samp>false</samp> then the overlay is positioned relative to the document so that when the screen is scrolled then the overlay moves along with the document.
</p>

<p>
	Here is a list of small changes for overlay in 1.2.0:
</p>

<ul>
	<li>Added a new <samp>load</samp> option. If it is enabled then the overlay loads immediately after it has been initialized.
	<li>Removed the deprecated <samp>getContent</samp> method. Use <samp>getOverlay</samp> instead.</li>
	<li>Removed <samp>onStart</samp> event. use <samp>onBeforeLoad</samp> instead.</li>
	<li>Removed <samp>absolute</samp> configuration option. it was rarely needed.</li>
	<li>The <samp>expose</samp> configuration option is now deprecated in favor of the <samp>mask</samp> option.</li>
</ul>

<p>
	The custom effects <samp>load</samp> method receives the position as its first argument. For example:
</p>

<pii:code>
// load function receives two arguments instead of one.
$.tools.tooltip.addEffect("my-effect", function(position, done) {

	// position has two properties: top and left
	var top = position.top,
		 left = position.left;

}, function(done) {

});
</pii:code>

<a name="gallery"></a>
<h3>No more Overlay Gallery plugin</h3>

<p>
	The previous jQuery Tools version had an Overlay Gallery plugin for making a "lightbox" type of slideshow. It didn't fit with the rest of the library mainly because of its hard-coded logic. So it was dropped! Something similar can be achieved with the the Slideshow plugin and placing it on Overlay.
</p>
<%--}}}--%>


<%--{{{  tabs --%>

<a name="tabs"></a>
<h2>Tabs</h2>

<p>
	The history feature is now enabled with a <samp>history</samp> configuration option instead of a plugin. For example:
</p>

<pii:code>
// old version: history tabs
$(".tabs").tabs(".panes > div").history();

// version 1.2: history option
$(".tabs").tabs(".panes > div", { history: true });
</pii:code>

<p>
	This requires that the <a href="${jqt}/toolbox/history.html">history tool</a> is included on the page. The new History tool can be utilized by other tools as well. Now the new scrollable also can take advantage of the browser's back button.
</p>

<p>
	In this version there is no need to initially set a pane visible with CSS using <samp>display: block</samp>. The tabs automatically clicks on the first pane if all panes are hidden. When using the "fade" effect, if a pane is already visible it is not "clicked" in vain.
</p>

<a name="slideshow"></a>
<h3>Slideshow plugin for Tabs</h3>

<p>
	In the previous version, slideshow methods such as <samp>play</samp>, <samp>pause</samp> and <samp>stop</samp> were <em>added</em> to the JavaScript API of the Tabs. Now they are methods of the slideshow plugin itself. For example:
</p>

<pii:code>
// initialize tabs and the slideshow plugin
$(".tabs").tabs(".panes > DIV").slideshow({ autoplay: true});

// get access to the slideshow API
var api = $(".tabs").data("slideshow");

// do something with the API
api.onPause(function()  {

	// the 'this' variable refers to the slideshow API
	var conf = this.getConf();
});
</pii:code>

<%--}}}--%>


<%--{{{  expose --%>

<a name="expose"></a>
<h2>Expose</h2>

<p>
	The new expose is more straightforward. There is no ability to have multiple masks simultaneously making the logic much simpler and the file size smaller. There are two terms being used: <strong>mask</strong> is a large element that is being placed on top of the document. In the new version this mask is a <em>singleton</em> that you can access with the static variable <samp>$.mask</samp>. <strong>expose</strong> is a verb that means placing selected elements on top of the mask. Here is how you work with the new Expose tool:
</p>


<pii:code>
// place a white mask over the page
$(document).mask();

// place a mask but let selected elements show through (expose)
$("div.to_be_exposed").expose();

// close the mask
$.mask.close();
</pii:code>

<p>
	There are two different calls: <samp>mask</samp> and <samp>expose</samp>. The <samp>mask</samp> method is only available for the document object and you cannot use any other selector. The <samp>expose()</samp> method can take any jQuery selector and all elements returned by the selector are placed on top of the mask.
</p>

<p>
	The mask is loaded <strong>immediately</strong> after the <samp>expose</samp> or <samp>mask</samp> call. You can supply a different configuration on each call and the latest call is remembered. A subsequent <samp>expose</samp> call for example will use the previously used configuration if no arguments are given.
</p>

<p>
	You can also use an existing element as a mask. By default the tool uses an element whose id is <samp>exposeMask</samp> and if it does not exist, then it is created automatically.
</p>

<p>
	The new configuration variable <samp>startOpacity</samp> defines the initial transparency level of the mask before it starts fading in to the desired opacity as specified by the <samp>opacity</samp> option. You can, for example, start with full opacity and gradually fade to a semi-transparent mask.
</p>

<p>
	On some occasions the mask did not fill the whole space of the document. Now these rare occasions have been eliminated. When the mask closes, all document listeners are removed making the page one thousand millisecond more responsive.
</p>

<%--}}}--%>


<%--{{{  flashembed --%>
<a name="flashembed"></a>
<h2>Flashembed</h2>

<p>
	Flashembed is now part of the Toolbox and no longer one of the main UI tools. The major change in this tool that it no longer contains <samp>flashembed.domReady()</samp> function that can be used to evaluate code right after the DOM is ready. This feature is a core part of the mainstream JavaScript libraries including jQuery and should not be included here. Another change is that the <samp>flashembed()</samp> call must be evaluated <strong>after</strong> the container element. So this won't work
</p>

<pii:code lang="html">
<!-- this setup won't work anymore! -->

<script>
// attempt to install Flash object inside a container that is *below* this call
flashembed("flashContainer", "my-flash-object.swf");
</script>

<!-- container for Flash -->
<div id="flashContainer"></div>
</pii:code>

<p>
	In the new version you need to move the script below the container:
</p>

<pii:code lang="html">
<!-- container for Flash -->
<div id="flashContainer"></div>

<!-- this works -->
<script>
flashembed("flashContainer", "my-flash-object.swf");
</script>
</pii:code>

<p>
	Upon initialization you can prefix the ID name with #- character. For example <samp>#mydiv</samp> simulating the syntax of jQuery selectors. For example:
</p>

<p>
	Generated OBJECT code now contains a <samp>name</samp> attribute along with <samp>id</samp> attribute. This makes it possible to use ExternalInterface on some older browsers.
</p>

<pii:code lang="html">
<script>
flashembed("#flashContainer", "my-flash-object.swf");
</script>
</pii:code>

<p>
	The tool no longer checks for Flash versions 6 and below. By the time of writing only 0.08 percent of users on Flowplayer website were using Flash 6 or below. No need to make complex logic for such minority.
</p>

<h3>Flashembed API changes</h3>

<ul>
	<li>removed <samp>flashembed.domReady</samp> static function</li>
	<li>removed <samp>getHTML</samp> API method</li>
	<li>
		renamed <samp>getFlashvars</samp> API method to <samp>getConf</samp> so that it follows the naming of other tools
	</li>
	<li>
		renamed <samp>getConf</samp> API method to <samp>getOptions</samp>. This returns the embedding options for the Flash object and is much more descriptive name.
	</li>
	<li>
		renamed <samp>getContainer</samp> API method to <samp>getRoot</samp>
	</li>
</ul>

<p class="more">
	In general Flashembed feels much more similar to other tools in the library. In previous versions it has been more of a black sheep.
</p>


<%--}}}--%>

<h2>Thanks to</h2>

<ul>
	<li>
		<strong>Christopher Vrooman</strong> for proof reading my not too perfect English.
	</li>
	<li>
		<strong>Christian Ebert</strong> for trimming the documentation and helping with Github. A special thank you for <samp>slice()</samp>!
	</li>
	<li>
		<strong>Stefan Penner</strong> for helping out with setting up the Github repositories
	</li>
	<li>
		<strong>Marko Dumic</strong> for helping with a bug in scrollable.
	</li>
</ul>

