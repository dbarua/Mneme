<%-- :mode=jsp: --%>
<%@ include file="../../demos/header.jsf" %>

<p>
	This demo shows you how you can use the overlay tool to prompt for user input. You may be familiar with the old school <samp>prompt()</samp> call in JavaScript. Now let's get into the modern world and use JavaScript more innovatively:
</p>

<%@ include file="modal-dialog.htm" %>

<p>
	The "Modal dialog" is an overlay that requires the user to interact with it before they can return to using the main document. This feature can be achieved with the <a href="${jqt}/toolbox/expose.html">Expose tool</a> which is tightly integrated with this overlay tool.
</p>

<p>
	There are two major advantages over the default JavaScript prompts:
</p>

<ol>
	<li>You can tweak the look and feel of the dialog box</li>
	<li>You can ask any kind of questions and have multiple input fields.</li>
</ol>

<h3>HTML coding</h3>

<p>
	Again, the HTML coding is no different from the <a href="index.html">basic setup</a>. There are trigger elements and their corresponding overlay elements. Note that we have <em>explicitly</em> defined the close buttons here by assigning the class name "close" to the buttons. This will automatically bind the <samp>close</samp> actions to them.
</p>

<pii:code lang="html">
${html}
</pii:code>

<h3>CSS coding</h3>

<p>
	Nothing special here. We style the dialog and a few elements inside it:
</p>

<pii:code lang="css">
${css}
</pii:code>

<h3>JavaScript coding</h3>

<p>
	First we enable those trigger elements to open our dialogs. We select the elements with the <a href="http://api.jquery.com/category/selectors/" class="external">jQuery selector</a> <samp>.modalInput</samp> and initialize overlaying with two configuration variables. The <samp>mask</samp> variable enables the semitransparent mask and we give it the color "#ebecff". By setting <samp>closeOnClick</samp> variable to <samp>false</samp> we enable our "modal" feature: users cannot interact with the main document when the overlay is open because the rest of the document is disabled by the mask until the dialog is closed.
</p>

<pii:code>
${js}
</pii:code>

<h4>Yes/No prompt</h4>

<p>
	Here is the code for the yes/no prompt. We bind a <samp>click</samp> event to both buttons and we know which one of the buttons is clicked by using jQuery's <samp>index</samp> method. After we know the result we simply write the answer to the trigger. Of course you should do something more useful with the result.
</p>

<pii:code>
${yesno}
</pii:code>

<h4>Input prompt</h4>

<p>
	Here we bind a <samp>submit</samp> event handler for the <samp>FORM</samp> element inside the dialog. This handler closes the overlay by using the overlay API call <samp>close</samp>. The default form submission action can be cancelled by returning <samp>e.preventDefault()</samp>.
</p>

<pii:code>
${prompt}
</pii:code>


<br />
<div class="box petrol">
	Here is the <a href="modal-dialog.htm">standalone version</a> of this demo. You can freely study and copy its source code.
</div>

