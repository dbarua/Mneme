<%-- :mode=jsp: --%>
<c:set var="tool" value="flashembed"/>

<h1 style="background:url(${cdn}${jqt}/img/hero/toolbox/flashembed.jpg) 0 30px no-repeat">
	jQuery TOOLS / flashembed - Adobe Flash embedding.
	Your future tool to place Flash objects on your pages
</h1>

<style>
#flash2 {
	margin-left:-20px;
}
</style>

<p class="more" style="color:black;padding-left:40px">
	Flashembed is a modern way of embedding Flash. Simple, elegant and robust.
</p>

<%@ include file="../demos/toolbox/flashembed/onclick2.htm" %>

<div class="feat">
	<h3>Simple</h3>

	<p>
		The above example was performed with this JavaScript call:
		<samp>flashembed(this, "flash_promo.swf");</samp>
		If you don't need anything special, it's easy to get Flash up and running on your site.
	</p>

</div>

<div class="feat last">

	<h3>JSON configuration</h3>

	<p>
		Flash can be configured with JSON. Compared to XML this is simpler and much more flexible. In fact this was the main reason for developing this tool.
	</p>
</div>

<div class="feat">

	<h3>jQuery support</h3>

	<p>
		flashembed is designed with scripters in mind. A polished programming API together with support for jQuery selectors has been built-in. As opposed to other jQuery Tools flashembed does not <em>require</em>jQuery.
	</p>

</div>

<div class="feat last">

	<h3>1.09 kb!</h3>

	<p>
		This crazy size is one quarter of the competitors. The clean source code passes Douglas Crockford's <a href="http://www.jslint.com" class="external">JavaScript Verifier</a> and it assigns only one global variable: <samp>flashembed</samp>.
	</p>

</div>

<div class="clear"></div>

<p class="more">
	<strong>Note:</strong> Flash is becoming an old school technology. The iPad and other products are removing the support for Flash. JavaScript will rule. Having said that, Flash technology still has an important role to play on the Internet; especially when you want to play videos.
</p>


<h3>Flashembed and jQuery Tools</h3>

<p>
	Distinct from other jQuery Tools, this tool does <strong>not</strong> depend on jQuery. You can use it as a standalone tool for embedding Flash. The jQuery syntax is <em>supported</em> but not required. For this reason, this tool lacks some of the features available in other tools such as callback functions and the ability to write plugins.
</p>

<h2>Demos</h2>

<p>
	We have seen that the best way to learn is through demos. Each of the following examples contain both documented source code and a standalone version of the demo that you can use to get flashembed working on your site:
</p>

<ul>
	<c:forEach items="${f:getDemo(context.toolDemos2, 'toolbox/flashembed/index.html').category.demos}" var="demo">
		<li> <a href="${jqt}/demos/${demo.path}">${demo.title}</a> </li>
	</c:forEach>
</ul>

<a name="documentation"></a>
<h2>Usage</h2>

<p>
	<samp>flashembed</samp> is a function and it accepts the following arguments:
</p>

<pii:code>
flashembed(container, embedOptions, flashConfiguration);
</pii:code>

<ol>
	<li>
		<strong>container</strong> identifies <em>where</em> the Flash object is placed on the document.
	</li>
	<li>
		<strong>embedOptions</strong> specifies the <em>path</em> to the Flash object and optionally <em>how</em> it is embedded.
	</li>
	<li>
		<strong>flashConfiguration</strong> is an optional argument and it configures the actual Flash object.
	</li>
</ol>

<h3><span class="blue">1st argument: </span> container</h3>

<p>
	This is either a DOM element or a string representing some element's <samp>id</samp> attribute. The Flash object is placed <em>inside</em> this container. It's important to note that you don't have to worry about where you place your container on the page or where you place your flashembed call. This tool takes care of finding the container you specify.
</p>

<p>
	As of version 1.2 you can prefix the <samp>ID</samp> name with <samp>#</samp> character. For example, <samp>#mydiv</samp> simulating the syntax of jQuery selectors.
</p>

<h3><span class="blue">2nd argument: </span> configuration</h3>

<p>
	The second argument specifies the <em>path</em> to the Flash object and optionally <em>how</em> it is embedded. This is either a simple string representing the path to the embedded flash object or an object that has many different configuration options including the path to the Flash object.
</p>

<p>
	In case you specify the second argument as an object, you can find a list of available options below. The options <em>before</em> the grey line are specific to flashembed and below that you can see the most popular <a class="external" href="http://kb.adobe.com/selfservice/viewContent.do?externalId=tn_12701">Flash parameters</a> that are understood by the Flash technology itself.
</p>

<table class="listing">

	<thead>
		<tr>
			<th>property</th>
			<th>default</th>
			<th>description</th>
		</tr>
	</thead>

	<tr>
		<td class="code"><strong>src</strong></td>
		<td></td>
		<td>
			The path to the Flash object to be embedded. This is the only required option.
		</td>
	</tr>
	<tr>
		<td class="code">version</td>
		<td>[3, 0]</td>
		<td>
			Specifies the minimum version required for the plugin. Adobe releases Flash versions in the following format: <samp>[major, 0, fix]</samp> where the minor number is always zero. For that reason, this tool ignores the second version number and the version is given in this format: <samp>[major, fix]</samp>.

			<p>
				So if you want to provide alternate content for versions that are below <samp>[9,0,45]</samp>, you must supply <samp>[9,45]</samp> here.
			</p>
		</td>
	</tr>
	<tr>
		<td class="code">expressInstall</td>
		<td></td>
		<td>
			This is an absolute or relative path to a <a href="/swf/expressinstall.swf">expressinstall.swf</a> file.
			<p>
				<a href="http://www.adobe.com/devnet/flashplayer/articles/express_install.html" class="external">Express Install</a> technology allows you to seamlessly upgrade visitors to your website to the latest player using a Flash-based experience. Express Install allows you to design an in-context upgrade experience for your content so users never have to leave your site. It also lets you gracefully handle user cancellation and avoid system restarts.
			</p>

			<p>
				If this is specified and the user's Flash version is greater than <samp>[6, 65]</samp>, then this plugin attempts to install Flash on-the-fly. You can learn more with <a href="${jqt}/demos/toolbox/flashembed/fail.html">this demo</a>.
			</p>
		</td>
	</tr>
	<tr>
		<td class="code">onFail</td>
		<td></td>
		<td>
			A JavaScript function that is evaluated when the Flash plugin is missing or its version is too old. You can learn more from <a href="${jqt}/demos/toolbox/flashembed/fail.html">this demo</a>. This function is called in every possible scenario when and old version is detected. Inside the function the <samp>this</samp> variable is a pointer to the <a href="#api">flashembed API</a>.
		</td>
	</tr>
	<tr>
		<td class="code">w3c</td>
		<td class="code">false</td>
		<td>
			If set to <samp>true</samp>, the tool switches to standards-based <samp>object</samp> syntax when generating HTML. You can find more information about this technical subject <a href="#html">here</a>.
		</td>
	</tr>
	<tr>
		<td class="code">cachebusting</td>
		<td class="code">false</td>
		<td>
			By enabling this property flashembed will force the SWF file to be loaded from the server and skip the browser's cache no matter what the expiry headers are. This is achieved by appending a random query string variable to the request URL.
		</td>
	</tr>
	<tr>
		<td class="code">id</td>
		<td class="code">random string</td>
		<td>
			id attribute for the generated OBJECT tag. If this is not explicitly given then a random string is used because in certain browser/os combinations the ID is required for solid functionality.
		</td>
	</tr>
	<tr><td colspan="3" style="background-color:#efefef"></td></tr>

	<tr>
		<td class="code">bgcolor</td>
		<td></td>
		<td>The hexadecimal RGB value in the format of #RRGGBB. This specifies the background color of the movie.</td>
	</tr>
	<tr>
		<td class="code">width</td>
		<td class="code">100%</td>
		<td>
			It is recommended that you not change this and instead specify the width and height for the <em>container</em> element using CSS.
		</td>
	</tr>
	<tr>
		<td class="code">height</td>
		<td class="code">100%</td>
		<td>
			It is recommended that you not change this and instead specify the width and height for the <em>container</em> element using CSS.
		</td>
	</tr>
	<tr>
		<td class="code">wmode</td>
		<td class="code">window</td>
		<td>
			Set this to "opaque" if you want to place normal HTML elements on top of the Flash object, for example, a dropdown menu. You can find a demo about this <a href="${jqt}/demos/toolbox/flashembed/wmode.html">here</a>.
		</td>
	</tr>
	<tr>
		<td class="code">allowfullscreen</td>
		<td class="code">true</td>
		<td>
			Allows your Flash object to enter Fullscreen mode. If you don't need this feature or are concerned about security, set this to <samp>false</samp>.
		</td>
	</tr>
	<tr>
		<td class="code">allowscriptaccess</td>
		<td class="code">always</td>
		<td>
			This enables Flash-to-JavaScript communication. If you don't need this feature or are concerned about security, set this to <samp>false</samp>.
		</td>
	</tr>
	<tr>
		<td class="code">quality</td>
		<td class="code">high</td>
		<td>
			Possible values are 'low', 'high', 'autolow', 'autohigh', and 'best'.	'low' favors playback speed over appearance and 'best' provides the best display quality and does not consider playback speed. It is recommended that you not change this. The default value "high" is the best compromise between quality and playback speed.
		</td>
	</tr>
</table>

<h3><span class="blue">3rd argument: </span> flashvars</h3>

<p>
	The third argument configures the Flash object you have defined in the second argument. This is optional because not all Flash objects are configurable. This is specified as a JavaScript object as follows:
</p>

<pii:code>
// supply configuration (flashvars) for the Flash object
flashembed("flash", "my_object.swf", {

	my_param: 'foobar',
	my_other_param: 'Hello world'

});
</pii:code>

<p>
	Flashembed has the unique feature of configuring your Flash objects with JSON. This gives you the ability to supply complex configurations directly upon embedding. JSON is a JavaScript-based syntax and is much more flexible and simpler than XML which has historically been used for Flash configuration. Here is an example of a JSON-based configuration:
</p>

<pii:code>
flashembed("flash", "my_object.swf", {

	/*
		a JSON-based configuration variable.
		enter the modern world of Flash configuration!
	*/
	my_param: {
		my_array: [1, 2, 3], ,
		my_other_param: 'Hello world',
		nested_object: {
			another_array: ["foo", "bar", 30.3]
		}
	}

});
</pii:code>

<p>
	If you are developing a Flash object and want to configure it with JSON, you can download JSON parsers for Flash from <a href="http://code.google.com/p/as3corelib/" class="external">as3corelib</a>.
</p>


<h3>A few embedding examples</h3>

<pii:code>
// install the Flash object inside an element whose id is "flash"
flashembed("flash", "myfolder/my_flash_object.swf");

// install the Flash inside a certain DOM element
var domElement = getElementById("flash");
flashembed(domElement, "my_flash_object.swf");

// tweak the embedding options
flashembed("flash", {
	src: 'my_object.swf',
	allowfullscreen: false
});
</pii:code>


<a name="jquery"></a>
<h2>jQuery support</h2>

<p>
	Flashembed has support for jQuery. This means that it can work as both a standalone script or as a jQuery plugin. You can use jQuery selectors to select elements from the page and place Flash objects inside them. Here is the generic jQuery syntax for flashembed:
</p>

<pii:code>
$("jquery_selector").flashembed(configuration, flashvars);
</pii:code>

<p>
	As you can see, there are a maximum of 2 arguments here and <samp>flashvars</samp> is optional as before. You can find more information about jQuery selectors <a href="http://api.jquery.com/category/selectors/">here</a>. Here is an example that will search all <samp>div</samp> elements with the class name "flash" and place a Flash object inside them:
</p>

<pii:code>
$("div.flash").flashembed("my_object.swf");
</pii:code>

<p>
	Simple and powerful. Once you have installed the Flash objects you can access the <a href="#api">flashembed API</a> with jQuery's <samp>data</samp> method as follows:
</p>

<pii:code>
// get access to the flashembed programming API
var api = $("div.flash:eq(0)").data("flashembed");
</pii:code>

<a name="api"></a>
<h2>Flashembed <span class="blue">API</span></h2>

<p>
	Here you can see the two different ways of accessing the Flashembed API:
</p>

<pii:code>
// the API is returned by the flashembed call
var api = flashembed("flash", "myfolder/my_flash_object.swf");

// inside the onFail function, the "this" variable is a pointer to the API
flashembed("container", {src: 'my_object.swf', version: [9, 115], onFail: function() {

	// use API methods here
	var conf = this.getConf();

});
</pii:code>

<p>
	This API has thr following methods available for your use:
</p>

<table class="listing">
	<thead>
		<tr>
			<th>method</th>
			<th nowrap>return value</th>
			<th>description</th>
		</tr>
	</thead>
	<tr>
		<td class="code">getApi()</td>
		<td><code>DOM element</code></td>
		<td>Some Flash objects have a JavaScript API. This method returns a pointer to that API.</td>
	</tr>
	<tr>
		<td class="code">getConf()</td>
		<td><code>Object</code></td>
		<td>Returns the optional configuration for the Flash object (3rd argument).</td>
	</tr>

	<tr>
		<td class="code">getOptions()</td>
		<td><code>Object</code></td>
		<td>Returns the embedding options for the Flash component (2nd argument).</td>
	</tr>
	<tr>
		<td class="code">getRoot()</td>
		<td><code>DOM element</code></td>
		<td>Returns the container for the Flash object</td>
	</tr>

</table>


<h2>Static methods</h2>

<p>
	Flashembed exposes few static methods. Static methods don't need any instances and can be called directly from the <samp>flashembed</samp> namespace. For example:
</p>

<pii:code>
// get the embedding code for the supplied options and configuration
flashembed.getHTML({src: 'my_object.swf', w3c: true}, {
	param1: 'foobar',
	param2: 'baz'
});
</pii:code>

<table class="listing">
	<thead>
		<tr>
			<th>method</th>
			<th nowrap>return value</th>
			<th>description/example</th>
		</tr>
	</thead>

	<tr>
		<td class="code">asString(Object)</td>
		<td><code>String</code></td>
		<td>Converts given Object to a JSON encoded string. The object can contain any JavaScript literals such as strings, arrays and other objects on any level. Function properties are converted to a string: <samp>function()</samp>.
	</td>
	</tr>
	<tr>
		<td class="code">getHTML(options, config)</td>
		<td><code>String</code></td>
		<td>Returns the embedding code for the given embedding options and optional Flash configuration. This method is useful if you want to quickly generate the <samp>object</samp> tag for your Flash objects so that you don't need to use JavaScript on your pages.</td>
	</tr>
	<tr>
		<td class="code">getVersion()</td>
		<td><code>Array</code></td>
		<td>
			Returns the Flash version of the user. Returns the array [major, fix]. For example: <samp>[9,45]</samp>. If Flash is not installed at all a <samp>[0, 0]</samp> is returned.
		</td>
	</tr>
	<tr>
		<td class="code">isSupported(version)</td>
		<td><code>boolean</code></td>
		<td>Whether the given version is supported. Example: <samp>flashembed.isSupported([9, 0]);</samp></td>
	</tr>

</table>


<a name="html"></a>
<h2>Generated HTML</h2>

<p>
	This section describes what happens "behind the scenes" and what kind of HTML is generated for the client when the Flash object is embedded. This is quite technical and if you are not interested in W3C standards feel free to skip this section.
</p>

<p>
	When studying what HTML will be produced we are using the following flashembed call:
</p>

<pii:code>
flashembed("clock", "/swf/clock.swf");
</pii:code>

<p>
	Which will generate a Flash-based clock as seen below:
</p>

<div id="clock" style="height:120px;width:120px"></div>

<script>
flashembed("clock", "/swf/clock.swf");
</script>

<p>
	This will generate the following HTML for Mozilla, Safari, Opera and Chrome:
</p>

<pii:code lang="html">
<object data="/swf/clock.swf" type="application/x-shockwave-flash" width="100%" height="100%">

	<!-- these parameters are generated by default -->
	<param name="allowfullscreen" value="true">
	<param name="allowscriptaccess" value="always">
	<param name="quality" value="high">
</object>
</pii:code>

<p>
	This is the standards-based syntax as specified in this <a href="http://www.w3.org/TR/REC-html40/struct/objects.html" class="external">W3C specification</a>. It's no surprise that Internet Explorer does not support this syntax so this browser is supplied with the following HTML instead.
</p>

<pii:code lang="html">
<object height="100%" width="100%" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000">
	<param value="/swf/clock.swf" name="movie"/>
	<param value="true" name="allowfullscreen"/>
	<param value="always" name="allowscriptaccess"/>
	<param value="high" name="quality"/>
</object>
</pii:code>

<p>
	This works only in IE and not in other browers.
</p>

<a name="w3c"></a>
<h3><em>W3C</em> configuration option</h3>

<p>
	Flashembed comes with a <samp>W3C</samp> option that will generate a standards-based syntax that works on <strong>all</strong> browsers. This syntax is specified in this <a href="http://www.alistapart.com/articles/flashsatay" class="external">A List Apart document</a> and you can generate similar code like this:
</p>

<pii:code>
// enable W3C object code syntax
flashembed("clock", {src: "/swf/clock.swf", w3c: true});
</pii:code>

<p>
	The generated HTML looks like this:
</p>

<pii:code lang="html">
<object height="100%" width="100%" type="application/x-shockwave-flash" data="/swf/clock.swf">
	<param value="/swf/clock.swf" name="movie"/>
	<param value="true" name="allowfullscreen"/>
	<param value="always" name="allowscriptaccess"/>
	<param value="high" name="quality"/>
</object>
</pii:code>

<p>
	This would appear to be a perfect solution, but there is one drawback. While every other browser is getting it right, IE/Windows is not streaming - it waits for the entire movie to download before playing it. This is fine for small movies, but for anything serious the lack of streaming is unacceptable. This is why this flag is only suitable for standards fanatics that are using small SWF files. The A List Apart document describes a workaround for this called "Flash satay" and you can read about it in the document.
</p>


