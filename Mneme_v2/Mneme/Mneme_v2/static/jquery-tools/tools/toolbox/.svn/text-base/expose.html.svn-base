<%-- :mode=jsp: --%>
<c:set var="tool" value="mask"/>

<style>
/* tweak the mask on this page */
#mask {
	background:url(${cdn}/img/global/gradient_black.png) repeat-x scroll 0 -300px
}
</style>

<h1 style="background:url(${cdn}${jqt}/img/hero/toolbox/expose.jpg) 0 30px no-repeat">
	jQuery Tools / Expose - Make your HTML elements stand out
</h1>


<h2 class="first">Demo</h2>

<p>
	Start entering text on the input fields below and you'll see the masking effect:
</p>

<%@ include file="../demos/toolbox/expose/form.htm" %>


<a name="story"></a>
<h2>The story</h2>

<p>
	Expose is a JavaScript tool that exposes selected HTML elements on the page so that the surrounding elements will gradually fade out. The exposing effect was first introduced in the <a href="overlay/index.html">overlay</a> tool. Usually the effect is an integral part of the program and cannot be used separately. This tool takes the idea of exposing a little further. It is a separate tool that can be used as a general purpose masking utility. You can use it for overlays, forms, images, videos or Flash objects. You can use CSS to tweak the look of the mask.
</p>


<a name="usage"></a>
<h2>Usage</h2>

<p>
	Here are some most common ways of using the mask:
</p>

<pii:code>
// place a white mask over the page
$(document).mask();

// place a custom colored mask over the page
$(document).mask("#789");

// place a non-closable mask
$(document).mask{ closeOnEsc: false, closeOnClick: false });

// place a mask but let selected elements show through (expose)
$("div.to_be_exposed").expose();

// close the mask
$.mask.close();
</pii:code>

<p>
	There are two different calls: <samp>mask</samp> and <samp>expose</samp>. The <samp>mask</samp> method is only available for the document object and you cannot use any other selector. The <samp>expose()</samp> method can take any jQuery selector and all elements returned by the selector are placed on top of the mask.
</p>

<p>
	The mask is loaded <strong>immediately</strong> after the <samp>expose</samp> or <samp>mask</samp> call. You can supply a different configuration on each call and the latest call is remembered. A subsequent <samp>expose</samp> call for example will use the previously used configuration if no arguments are given.
</p>

<p>
	You can also use an existing element as a mask. By default the tool uses an element whose id is <samp>exposeMask</samp> and if it does not exist already exist then it will be created automatically.
</p>

<a name="demos"></a>
<h2>Demos</h2>

<p>
	We believe that the best way to learn is through demos. The following demos are fully documented and a standalone page is provided to get mask working on your site. It's really important to <strong>study the first demo</strong> "Minimal setup for mask" because it teaches you the basics of using the library.
</p>

<ul>
	<c:forEach items="${f:getDemo(context.toolDemos2, 'toolbox/expose/index.html').category.demos}" var="demo">
		<li> <a href="../demos/${demo.path}">${demo.title}</a> </li>
	</c:forEach>
</ul>

<h3>Expose and Flowplayer demos</h3>

<p>
	These demos show how to use a video player together with the mask tool:
</p>

<ul>
	<li><a href="/demos/events/mouseover.html">Exposing video upon mouseover</a></li>
	<li><a href="/demos/tools/overlay2.htm">Exposing videos</a></li>
	<li><a href="/demos/tools/fake-fullscreen.html">Custom fullscreen action with overlay and mask</a></li>
	<li><a href="/demos/tools/sharing-overlay.html">Email and embed features with overlay and mask</a></li>
</ul>

<a name="graphics"></a>
<c:set var="description">
	<p>
		These graphics are being used as the mask's background image. JPG versions are smaller, but they have a fixed background color. PNG images are larger, but you can use any background color in them. Here is a <a href="${jqt}/demos/expose/styling.html">cool example</a> where the mask's background image has been changed.
	</p>
</c:set>

<%@ include file="../graphics.jsf" %>

<style>
#masks img {
	width:226px;
	border:2px solid #fff;
	outline:1px solid #333;
}
</style>

<div id="masks">
	<img src="../img/mask/thumb/mask_gradient.jpg" />
	<img src="../img/mask/thumb/mask_star.jpg"  />
	<img src="../img/mask/thumb/mask_star.png" />
</div>


<a name="configuration"></a>
<h2>Configuration</h2>

<p>
	Here is a full list of available configuration options:
</p>

<table class="listing">
	<thead>
		<tr>
			<th>property</th>
			<th>default</th>
			<th>description</th>
		</tr>
	</thead>
	<tr>
		<td class="code">closeOnClick</td>
		<td><code>true</code></td>
		<td>
			Specifies whether the masking disappears when the mask is clicked. By default, this is set to <samp>true</samp>.
		</td>
	</tr>
	<tr>
		<td class="code">closeOnEsc</td>
		<td><code>true</code></td>
		<td>
			Specifies whether masking disappears when the <samp>ESC</samp> key is pressed from the keyboard. By default, this is set to <samp>true</samp>.
		</td>
	</tr>
	<tr>
		<td class="code">closeSpeed</td>
		<td><code>'fast'</code></td>
		<td>
			How quickly the mask disappears. Possible values are 'slow', 'normal' and 'fast or you can supply the number of milliseconds. For example, a value of 2000 will cause the mask to disappear in 2 seconds. By setting this to zero there is no animation and the mask disappears immediately.
		</td>
	</tr>

	<tr>
		<td class="code">color</td>
		<td><code>'#fff'</code></td>
		<td>
			The background color of the mask. This will dramatically affect how it appears. If you supply a value of <samp>null</samp> here, you can control the background color with CSS. See the <samp>maskId</samp> property below for more information.
		</td>
	</tr>
	<tr>
		<td class="code">loadSpeed</td>
		<td><code>'slow'</code></td>
		<td>
			How quickly the mask will appear. Possible values are 'slow', 'normal' and 'fast or you can supply the number of milliseconds. For example, a value of 2000 will cause the mask to appear in 2 seconds. By setting this to zero there is no animation and the mask appears immediately.
		</td>
	</tr>
	<tr>
		<td class="code">maskId</td>
		<td><code>'exposeMask'</code></td>
		<td>
			The mask is a normal <samp>div</samp> element placed on top of your page and whose size is automatically adjusted to cover the user's screen completely. You can style it normally with CSS just like any other element on the page. By default, the mask's <samp>id</samp> is set to <samp>mask</samp>, but you can change that with tis configuration option. Since version 1.2.0 you can use an existing element as the mask if it's id matches the one given in this configuration option.
		</td>
	</tr>
	<tr>
		<td class="code">opacity</td>
		<td><code>0.8</code></td>
		<td>
			The transparency setting of the mask. A decimal value from 0 to 1. A bigger value means less transparency while a value of 0 is fully transparent (invisible).
		</td>
	</tr>
	<tr>
		<td class="code">startOpacity</td>
		<td><code>0</code></td>
		<td>
			<strong>since 1.2.0</strong>. The initial transparency level of the mask before it starts fading in to the desired opacity as specified by the <samp>opacity</samp> option. A decimal value from 0 to 1. A bigger value means less transparency while a value of 0 is fully transparent (invisible). For example, you can start with full opacity and gradually fade to a semi-transparent mask.
		</td>
	</tr>
	<tr>
		<td class="code">zIndex</td>
		<td><code>9998</code></td>
		<td>
			This is the z-index CSS property for the mask. The <samp>zIndex</samp> specifies the placement of the element along the z-axis of the document. The default <samp>zIndex</samp> value is very high, so it is unlikely that you will need to alter it; however, this value must be greater than the z-index of any other element on the page so that the overlay will always be visible when called.
		</td>
	</tr>

	<tr><td colspan="3" style="background-color:#efefef"><a name="callbacks"></a></td></tr>

	<tr>
		<td class="code">onBeforeLoad</td>
		<td><code></code></td>
		<td>
			This callback function is triggered before the masking effect. Returning <samp>false</samp> or calling <samp>event.preventDefault()</samp> in the callback prevents masking from occurring.
		</td>
	</tr>
	<tr>
		<td class="code">onLoad</td>
		<td><code></code></td>
		<td>
			This callback function is triggered after masking takes place.
		</td>
	</tr>
	<tr>
		<td class="code">onBeforeClose</td>
		<td><code></code></td>
		<td>
			This callback function is triggered before mask is closed. Returning <samp>false</samp> or calling <samp>event.preventDefault()</samp> in the callback prevents it from closing.
		</td>
	</tr>
	<tr>
		<td class="code">onClose</td>
		<td><code></code></td>
		<td>
			This callback function is triggered when mask is closed.
		</td>
	</tr>
</table>

<p>
	Here is an example of an <samp>onBeforeLoad</samp> callback function given in configuration. Inside any callback function the <samp>this</samp> variable is a pointer to the <a href="#api">mask scripting API</a>.
</p>

<pii:code>
$("#mydiv").expose({

	// before masking begins ...
	onBeforeLoad: function(event) {

		// grow the exposed elements smoothly by 100 pixels
		this.getExposed().animate({width: '+=100'});
	}
});
</pii:code>

<p>
	<strong>Note:</strong> unlike other jQuery Tools you can supply callbacks only from the configuration and you can assign only one callback for the same event.
</p>

<a name="api"></a>
<h2>Scripting <em>API</em></h2>

<p>
	Unlike other jQuery Tools in this library the mask is a <em>singleton</em>. Only one mask instance can exist at any given time. This singleton can be accessed directly with <samp>$.mask</samp> or via the <samp>this</samp> variable inside callback functions.
</p>

<h3>Method listing</h3>

<table class="listing">
	<thead>
		<tr>
			<th>method</th>
			<th nowrap>return value</th>
			<th>description/example</th>
		</tr>
	</thead>

	<tr>
		<td class="code">close()</td>
		<td><code>API</code></td>
		<td>
			Closes the mask.
		</td>
	</tr>
	<tr>
		<td class="code">fit()</td>
		<td><code>API</code></td>
		<td>
			Forces the mask to fill the whole document. This is usually not needed since the tool itself does this. You'll need this on occasions when the mask is loaded and your document has grown in size in the meantime.
		</td>
	</tr>		<tr>
		<td class="code">isLoaded(fully)</td>
		<td><code>boolean</code></td>
		<td>
			Returns <samp>true</samp> if mask is loaded. Since 1.2.4 you can supply a boolean argument that makes sure that the function returns <samp>true</samp> only if the mask is fully visible in it's final position and opacity.
		</td>
	</tr>
	<tr>
		<td class="code">getMask()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the mask as a jQuery object. You can use jQuery methods such as <samp>css</samp> or <samp>animate</samp> to modify it.
		</td>
	</tr>
	<tr>
		<td class="code">getExposed()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns exposed elements (if any) as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">getConf()</td>
		<td><code>Object</code></td>
		<td>
			Returns the masking configuration.
		</td>
	</tr>

</table>


