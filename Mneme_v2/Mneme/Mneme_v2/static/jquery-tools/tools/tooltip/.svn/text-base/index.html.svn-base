
<%-- :mode=jsp: --%>
<c:set var="tool" value="tooltip"/>

<h1 style="background:url(../img/hero/tooltip.jpg) no-repeat -9px 25px">
	jQuery Tools / Tooltip - Tooltips done right
</h1>

<div style="margin:0 -5px 20px -5px">
	<%@ include file="../demos/tooltip/dynamic.htm" %>
</div>

<%--{{{  intro --%>

<div class="feat" style="min-height:100px">

	<h3 class="first">Simple or Rich</h3>

	<p>
		A simple call such as <samp>$("img[title]").tooltip();</samp> will enable tooltips by taking advantage of the element's <samp>title</samp> attribute. If you want complex tooltips with images, tables, forms and links that's possible by placing the tooltip element manually next to the trigger element.
	</p>

</div>

<div class="feat last" style="min-height:100px">

	<h3 class="first">Configure design, timing and positioning</h3>

	<p>
		Use CSS to create rounded borders, arrows, gradients or shadows. Big or small, high or low. Use the configuration to tweak pre and post-delays and positioning to your personal needs.
	</p>

</div>

<div class="feat">
	<h3>Fading, sliding, dynamic</h3>

	<p>
		Tooltip comes with two built-in effects: <samp>toggle</samp>, and <samp>fade</samp> and one separate effect, <a href="slide.html">slide</a>, and you can easily <a href="#effects">build your own effects</a>. The <a href="dynamic.html">dynamic plugin</a> will dynamically change the tooltip's position so that it always stays in the viewport.
	</p>

</div>

<div class="feat last">
	<h3>File size: 1.10 Kb</h3>

	<p>
		This tool has all the features and configuration options you'll possibly need, such as effect and a plugin framework, <a href="#api">scripting API</a> and an <a href="#events">event model</a>. A smaller codebase is easier to control and results in snappier behaviour. Without gzipping the size is 3.5 Kb.
	</p>

</div>

<br clear="all" />

<%--}}}--%>


<%--{{{  usage--%>

<a name="usage"></a>
<h2>Usage</h2>

<p>
	Here is the simplest possible Tooltip initialization:
</p>

<pii:code>
$("[title]").tooltip();
</pii:code>


<p>
	You select one or more elements with a jQuery selector that will trigger the tooltip(s). The trigger's <samp>title</samp> attribute will be used as the tooltip content. The actual tooltip element is auto-generated when it is being shown for the first time. Look at the <a href="../demos/tooltip/index.html">minimal setup</a> to understand the basics.
</p>

<h3>Manual tooltips</h3>

<p>
	Manual tooltips are HTML elements (typically DIVs) that are placed next to the trigger element and they can contain any HTML such as images, links and tables. The initialization is identical but now we assume that the trigger element does not have a <samp>title</samp> attribute.
</p>

<pii:code>
$(".trigger").tooltip();
</pii:code>

<p>
	After this the element next to the trigger is being used as the tooltip.
</p>

<h3>Tooltip configuration</h3>

<p>
	Tooltip has many <a href="#configuration">configuration options</a> to tweak the behaviour. Here is an example configuration with two options:
</p>
<pii:code>
$(".trigger").tooltip({ position: "bottom left", opacity: 0.7});
</pii:code>


<%--}}}--%>


<a name="demos"></a>
<h2>Demos</h2>

<p>
	We believe that the best way to learn is through demos. The following demos are fully documented and a standalone page is provided to get tooltip working on your site. It's really important to <strong>study the first demo</strong> "Basics of using the tooltip", because it teaches you the basics of using the library.
</p>

<ul>
	<c:forEach items="${f:getDemo(context.toolDemos, 'tooltip/index.html').category.demos}" var="demo">
		<p> <a href="${jqt}/demos/${demo.path}">${demo.title}</a> </p>
	</c:forEach>
</ul>


<%@ include file="../graphics.jsf" %>

<img src="../img/tooltip/black_arrow.png" alt="" />
<img src="../img/tooltip/black_arrow_big.png" alt="" />
<img src="../img/tooltip/white.png" alt="" />
<img src="../img/tooltip/white_big.png" alt="" />


<%--{{{ configuration --%>

<a name="configuration"></a>
<h2>Configuration</h2>

<table class="listing">
	<thead>
		<tr>
			<th>property</th>
			<th>default</th>
			<th>description</th>
		</tr>
	</thead>
	<tr>
		<td class="code">cancelDefault</td>
		<td><code>true</code></td>
		<td>
			<strong>Since 1.1.0.</strong> When tooltip content is fetched from the <samp>title</samp> attribute of the trigger element this property cancels the default tooltip behaviour executed by the browser. This is achieved by simply removing the <samp>title</samp> attribute from the trigger.

			<p style="color:#666">
				You can still retrieve/modify the title value by calling jQuery's <samp>data("title")</samp> method for the trigger.
			</p>
		</td>
	</tr>
	<tr>
		<td class="code">effect</td>
		<td><code>'toggle'</code></td>
		<td>
			Specifies how the tooltip is shown and hidden. There are two built-in effects that can be used as values:

			<ul>
				<p><strong>toggle</strong>. A simple show/hide effect. This is the default</p>
				<p><a href="#fade">fade</a>. A simple fade in/fade out effect</p>
			</ul>

			<p>
				There is also a <a href="#slide">slide effect</a> which is not included in the tool itself. You can <a href="#effects">build your own effects</a> too.
			</p>
		</td>
	</tr>
	<tr>
		<td class="code">delay</td>
		<td><code>30</code></td>
		<td>
			Specifies how long the tooltip remains visible after the mouse leaves the trigger. This is necessary if the tootip has interactive content and the user will need time to move to the tootip area. By setting this to 0 the tooltip will disappear as soon as the mouse moves away from the trigger element.
		</td>
	</tr>
	<tr>
		<td class="code">events</td>
		<td><code>Object</code></td>
		<td>
			A configuration object that specifies when the tooltip will be shown and hidden. You can specify different events for different kinds of elements. Here are the default values for this property:

<pii:code>
events: {
  def:     "mouseover,mouseout",
  input:   "focus,blur",
  widget:  "focus mouseover,blur mouseout",
  tooltip: "mouseover,mouseout"
}
</pii:code>

			<p>
				You can read more about this topic in the <a href="#events">event management</a> chapter.
			</p>

		</td>
	</tr>
	<tr>
		<td class="code">layout</td>
		<td><code>'&lt;div/&gt;'</code></td>
		<td>
			<strong>Since 1.2.0</strong> the HTML layout for the generated tooltip. The HTML can be as complex a layout as you wish. You can, for example, add a nested <samp>span</samp> element as a placeholder for an arrow.

		</td>
	</tr>
	<tr>
		<td class="code">offset</td>
		<td><code>[0, 0]</code></td>
		<td>
			Fine tunes the tooltip position specified with the <samp>position</samp> property. See the <a href="#positioning">positioning details</a> for more information.
		</td>
	</tr>
	<tr>
		<td class="code">opacity</td>
		<td><code>1</code></td>
		<td>
			The transparency of the tooltip. For example, 0 means invisible, 1 means no transparency (fully visible) and 0.4 means that 40% of the tooltip is shown. If your tooltip uses a CSS background image, you can set the transparency of the image if it has been saved in the PNG24 graphics format. Remember that Internet Explorer 6 does not natively support PNG transparency.
		</td>
	</tr>
	<tr>
		<td class="code">position</td>
		<td nowrap><code style="font-size:11px">'top center'</code></td>
		<td>
			Specifies the position of the tooltip. See the <a href="#positioning">positioning details</a> for more information. The old format: <samp>['top', 'center']</samp> is deprecated and will be removed in the future.
		</td>
	</tr>
	<tr>
		<td class="code">predelay</td>
		<td><code>0</code></td>
		<td>
			<strong>Since 1.1.0.</strong> Specifies the delay (in milliseconds) before the tooltip is shown. By default there is no delay.
		</td>
	</tr>
	<tr>
		<td class="code">relative</td>
		<td><code>false</code></td>
		<td>
			<strong>Since 1.1.1.</strong> by default the tooltip position is now determined relative to the document (by using the <samp>offset()</samp> method of jQuery). By enabling this property the tooltip position is determined relative to the parent element
		</td>
	</tr>
	<tr>
		<td class="code">tip</td>
		<td><code></code></td>
		<td>
			A jQuery selector for a single tooltip element. For example <samp>#mytip</samp>. This option is only valid if you want to manually define a single tooltip for multiple trigger elements simultaneously. Since 1.2.5 <samp>title</samp> attribute can still be used as the tooltip contents. 
		</td>
	</tr>
	<tr>
		<td class="code">tipClass</td>
		<td><code>'tooltip'</code></td>
		<td>
			<strong>Since 1.2.0.</strong> CSS class name for the generated tooltip element.
		</td>
	</tr>
</table>
<%--}}}--%>


<a name="positioning"></a>
<h3>Tooltip positioning</h3>

<p>
	The tooltip position is specified with two different configuration properties: <samp>position</samp> and <samp>offset</samp>. The <samp>position</samp> property specifies the position in relation to the trigger element. For example, a value of <samp>'bottom center'</samp> will place the tooltip on the bottom edge of the trigger, centered horizontally. The following image illustrates the "slots" that you can use:
</p>

<div style="background:url(../img/tooltip/positions.png) no-repeat -20px 0;height:340px"></div>

<p>
	The <samp>offset</samp> property fine tunes the tooltip position specified with the <samp>position</samp> property. For example, the value <samp>[10, -20]</samp> moves the tooltip position 10px downwards and 20px to the left. The first value modifies the vertical positioning from the top edge of the tooltip and the second value modifies the horizontal positioning from the left edge of the tooltip. Positive values move the tooltip downward and to the right, while negative values move the tooltip upward and to the left.
</p>

<a name="callbacks"></a>
<h2>Events</h2>

<p>
	Make sure you have read about <a href="${jqt}/documentation/scripting.html#events">Events in jQuery Tools</a>. All event listeners receive the <a href="${jqt}/documentation/scripting.html#event_object">Event Object</a> as the first argument.
</p>

<table class="listing">
	<thead>
		<tr>
			<th>event</th>
			<th nowrap>When it occurs?</th>
		</tr>
	</thead>

	<tr>
		<td class="code">onBeforeShow</td>
		<td>
			before the tooltip is shown. second argument is the tooltip position to be used. This is an object with values <samp>{top: integer, left: integer}</samp>
		</td>
	</tr>
	<tr>
		<td class="code">onShow</td>
		<td>
			after the tooltip is shown.
		</td>
	</tr>
	<tr>
		<td class="code">onBeforeHide</td>
		<td>
			before the tooltip is hidden
		</td>
	</tr>
	<tr>
		<td class="code">onHide</td>
		<td>
			when the tooltip is hidden.
		</td>
	</tr>
</table>

<p>
	Here is an example of an <samp>onShow</samp> callback function that fades out the trigger element when the tooltip is shown:
</p>

<pii:code>
$("label").tooltip({

	// change trigger opacity slowly to 0.8
	onShow: function() {
		this.getTrigger().fadeTo("slow", 0.8);
	}

});
</pii:code>


<a name="events"></a>
<h3>Event management</h3>

<p>
	jQuery Tooltip allows you to fully control <em>when</em> the tooltip will be shown or hidden. You can specify different events for different types of elements. You can control this behaviour with the <samp>events</samp> configuration variable which has following values by default:
</p>

<pii:code>
events: {
  def:     "mouseenter,mouseleave",    // default show/hide events for an element
  input:   "focus,blur",               // for all input elements
  widget:  "focus mouseenter,blur mouseleave",  // select, checkbox, radio, button
  tooltip: "mouseenter,mouseleave"     // the tooltip element
}
</pii:code>

<p>
	This specifies opening and closing events for various types of trigger elements. <samp>def</samp> accepts a value <samp>mouseover,mouseout</samp> which means that by default the tooltip is shown when the mouse moves over the trigger and hides when the mouse moves away from the trigger. For <samp>input</samp> elements (text, textarea, password) the tooltip appears when the input is focused and hides when focus moves out of the field.
</p>

<p>
	<samp>widget</samp> is a catchall type which means <samp>select</samp>, <samp>checkbox</samp>, <samp>radio</samp> and <samp>button</samp> elements. For them the tooltip is shown on both <samp>focus</samp> and <samp>mouseover</samp> events and hidden on both <samp>blur</samp> and <samp>mouseout</samp> events. This is just a convenience because these elements usually need some kind of tooltip behaviour.
</p>

<p>
	You can also customize the events for the tooltip element. By default the tooltip stays visible when the mouse is moved over it and it is hidden upon <samp>mouseleave</samp>. If you don't want to close the tooltip upon <samp>mouseleave</samp>, you can simply specify: <samp>tooltip: "mouseenter"</samp>. This gives you the possibility of closing the tooltip programmatically. This has been done on the login/signup boxes on the main navigation bar of this website.
</p>

<p>
	If you want to customize these events you can follow the example below:
</p>

<pii:code>
$("label").tooltip({
	events: {
		input: 'click, blur',
		checkbox: 'mouseover click, mouseout',
		date: 'click, blur'
	}
});
</pii:code>

<p>
	This will override the events for every <samp>input</samp> element. We have also defined customized events for the <samp>checkbox</samp> field. The tool checks for the trigger element's <samp>type</samp> attribute to lookup the appropriate events from the configuration.
</p>

<p>
	The format of the value is: <samp>showEvent11 showEvent2 ... showEventN, closeEvent1 closeEvent2 ... closeEventN</samp>. You first supply all showing events separated with spaces followed by a comma (,) followed by all close events separated with spaces. A list of available events can be found <a href="http://docs.jquery.com/Events" class="external">here</a>. Look at the "Event Helpers" section for more information.
</p>

<p>
	Nothing stops you from adding special types for your elements just by defining a <samp>type</samp> attribute. Here we use a <samp>date</samp> type that was added to the HTML5 specification and the corresponding element on the page is defined like this:
</p>

<pii:code lang="html">
<input type="date" name="birthDate" />
</pii:code>

<p>
	Here is a <a href="${jqt}/demos/tooltip/form.html">demo</a> that shows you the various event types in action.
</p>

<%--{{{ api --%>

<a name="api"></a>
<h2>Scripting <em>API</em></h2>

<p>
	First make sure you have familiarized yourself with <a href="${jqt}/documentation/scripting.html">jQuery Tools scripting</a>.
</p>

<p>
	Here is a list of all API methods:
</p>


<table class="listing">
	<thead>
		<tr>
			<th>method</th>
			<th nowrap>return value</th>
			<th>description/example</th>
		</tr>
	</thead>

	<tr>
		<td class="code">show()</td>
		<td><code>API</code></td>
		<td>
			Shows the tooltip.
		</td>
	</tr>
	<tr>
		<td class="code">hide()</td>
		<td><code>API</code></td>
		<td>
			Hides the tooltip.
		</td>
	</tr>
	<tr>
		<td class="code">isShown(fully)</td>
		<td><code>boolean</code></td>
		<td>
			Returns <samp>true</samp> if the tooltip is visible. Since 1.2.0 you can supply a boolean argument that makes sure that the function returns <samp>true</samp> only if the tooltip is fully visible (in it's final position and opacity).
		</td>
	</tr>
	<tr>
		<td class="code">getTip()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the tooltip as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">getTrigger()</td>
		<td><code>jQuery</code></td>
		<td>
			Returns the triggering element as a jQuery object.
		</td>
	</tr>
	<tr>
		<td class="code">getConf()</td>
		<td><code>Object</code></td>
		<td>
			Returns the tooltip configuration.
		</td>
	</tr>
</table>
<%--}}}--%>


<a name="fade"></a>
<h2>Built-in effect: <em>fade</em></h2>

<p>
	The built-in effect "fade" has its own set of configuration options as follows:
</p>

<table class="listing">

	<thead>
		<tr>
			<th>property</th>
			<th>default</th>
			<th>description</th>
		</tr>
	</thead>
	<tr>
		<td class="code">fadeInSpeed</td>
		<td class="code">400</td>
		<td>The fade-in speed when the tooltip is shown, in milliseconds.</td>
	</tr>
	<tr>
		<td class="code">fadeOutSpeed</td>
		<td class="code">200</td>
		<td>The fade-out speed when the tooltip is hidden, in milliseconds.</td>
	</tr>

</table>


<a name="effects"></a>
<h2>Making custom effects</h2>

<p>
	If you want to make custom effects, you'll use the <samp>$.tools.tooltip.addEffect</samp> method. This method is "static", meaning that you don't have to have the tooltip API (or instance) already loaded. You can add effects before any tooltips are constructed.
</p>

<p>
	This method accepts three arguments. The first argument is the effect name, the second argument is the function that performs the required functionality for showing the tooltip and the third argument is a function that hides the tooltip. You can use this method to modify existing effects or add new ones. Here is an example:
</p>

<pii:code>
// adds an effect called "myEffect" to the tooltip
$.tools.tooltip.addEffect("myEffect",

	// show function
	function(done) {

		// 'this' variable is a reference to the tooltip API
		var conf = this.getConf(), tip = this.getTip();

		// peform your effect. for example:
		tip.css({opacity: 1, width: '+=50'});

		// after you have finished you must do
		done.call();
	},

	// hide function
	function(done) {

		// peform your effect. for example:
		this.getTip().animate({opacity: 0, width: '-=50'}, done);
	}
);
</pii:code>

<p>
	As you can see inside the functions the <samp>this</samp> variable is a pointer to the <a href="api">scripting API</a>. Which gives you access to various parts of the tooltip elements. The functions are fed with one argument which is a reference to a function that <strong>must</strong> be called after you have performed your effect. The reason for this is that many times those effects perform animations that have a certain duration. We must know when these animations are finished so that the <samp>onShow</samp> and <samp>onHide</samp> events are really called <strong>after</strong> the tooltip is completely shown or hidden.
</p>

<p>
	<strong>Note:</strong> if you are using jQuery's <samp>animate</samp> method the "done" function can simply be given to this method as the last argument. jQuery will take care of it after the animation finishes.
</p>

<h3>The default effect</h3>

<p>
	Effects are actually quite easy to implement. Here are the functions for the default show/hide effect:
</p>

<pii:code>
// show function
function(done) {
	this.getTip().show();
	done.call();
},

// hide function
function(done) {
	this.getTip().hide();
	done.call();
}
</pii:code>

<p>
	Look at tooltip's source code for more examples of the effects. The basic idea is to use your jQuery skills together with the API methods. Here you can see a demo about the <a href="${jqt}/demos/tooltip/custom-effect.html">custom sliding effect</a>.
</p>




